// api/calendar.js
// Serverless endpoint for Vercel (Node.js) that fetches the global ICS and returns a filtered ICS
// Usage: /api/calendar?tags=RH,CD
// Notes: The endpoint fetches the up-to-date file from your GitHub Pages site (generated by your GitHub Action).

module.exports = async (req, res) => {
  try {
    // Read tags from query string
    const tagsParam = (req.query && (req.query.tags || req.query.tag)) || "";
    const rawTags = tagsParam
      .split(",")
      .map(t => t.trim())
      .filter(Boolean);

    // URL of your global ICS (kept up-to-date by your GitHub Action)
    const ICS_URL = "https://sneakyontv.github.io/pokemon-go-calendar-fr/calendar/gocal_fr.ics";

    // Fetch the global ICS
    const r = await fetch(ICS_URL);
    if (!r.ok) {
      return res.status(502).send("Erreur lors de la récupération du fichier ICS source.");
    }
    const ics = await r.text();

    // If no tags provided, return the original ICS
    if (rawTags.length === 0) {
      res.setHeader("Content-Type", "text/calendar; charset=utf-8");
      res.setHeader("Content-Disposition", 'attachment; filename="gocal_fr.ics"');
      return res.status(200).send(ics);
    }

    // Split header (everything before the first BEGIN:VEVENT) and the events
    const firstEventIndex = ics.indexOf("BEGIN:VEVENT");
    let header = ics;
    let eventsSection = "";
    if (firstEventIndex !== -1) {
      header = ics.substring(0, firstEventIndex);
      eventsSection = ics.substring(firstEventIndex);
    }

    // Build array of individual VEVENT blocks
    const rawEvents = eventsSection
      .split("BEGIN:VEVENT")
      .slice(1)
      .map(e => "BEGIN:VEVENT" + e);

    // Filter events that contain at least one of the requested tags
    const filteredEvents = rawEvents.filter(ev => {
      const evLower = ev.toLowerCase();
      return rawTags.some(tag => {
        // match "[TAG]" in the event (case-insensitive)
        const bracket = `[${tag}]`.toLowerCase();
        return evLower.includes(bracket);
      });
    });

    // Build the output ICS: header + filtered events + END:VCALENDAR
    let output = header;
    if (!output.endsWith("\n")) output += "\n";
    for (const ev of filteredEvents) {
      output += ev;
      if (!ev.endsWith("\n")) output += "\n";
    }
    if (!output.includes("END:VCALENDAR")) output += "END:VCALENDAR\n";

    // Create a filename that includes the tags for convenience
    const safeName = rawTags.join("-").replace(/[^a-zA-Z0-9-_]/g, "_");
    const filename = `gocal_${safeName || "filtered"}.ics`;

    res.setHeader("Content-Type", "text/calendar; charset=utf-8");
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    // Optional: cache-control (short) -- Vercel will cache aggressively otherwise
    res.setHeader("Cache-Control", "s-maxage=60, stale-while-revalidate=300");
    return res.status(200).send(output);
  } catch (err) {
    console.error("ERROR in /api/calendar:", err);
    return res.status(500).send("Erreur interne du serveur.");
  }
};
